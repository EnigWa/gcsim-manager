# use truncated normal distribution for random delay
fn rand_delay(mean, stddev, min, max) {
  # randnorm has mean: 0 and stddev: 1, so this makes it have mean and stddev from input
  let del = randnorm() * stddev + mean;
  
  # truncate random value according to min and max
  if del < min {
    del = min;
  } else if del > max {
    del = max;
  }
  
  # execute delay
  delay(del);
}

let prev_char_id = -1;
let prev_action_id = -1;

let _execute_action = execute_action;
fn execute_action(char_id number, action_id number, p map) {
  #print(prev_char_id, " ", prev_action_id, " ", char_id, " ", action_id);

  # this next if block handles implict swap or otherwise any pre swap delay specified in this function will not work
  if prev_char_id != char_id && action_id != .action.swap {
    execute_action(char_id, .action.swap, []);
  }

  if action_id == .action.swap {
    # add delay before swap
      # ~3% chance at 6
      # ~7% chance at 20
    rand_delay(14, 4, 6, 20);
  } else if prev_action_id == .action.attack && action_id == .action.attack {
    // no delay
  } else if prev_action_id == .action.attack && action_id == .action.charge {
    // no delay
  } else if prev_action_id == .action.swap && action_id == .action.burst {
    // no delay
  } else if prev_action_id != .action.swap  {
    # add delay before every non-swap
      # ~30% chance at 0
      # 5% chance at 8
    rand_delay(2, 4, 0, 8);
  } else if prev_action_id == .action.swap {
    # add delay after swap to account for repositioning
      # ~16% chance at 6
      # ~16% chance at 18
    rand_delay(12, 6, 6, 18);
  }

  # this here tracks the previous character id so that it can be used above
  prev_char_id = char_id;
  prev_action_id = action_id;
  return _execute_action(char_id, action_id, p);
}

raiden char lvl=90/90 cons=0 talent=9,9,9;
raiden add weapon="thecatch" refine=5 lvl=90/90;
raiden add set="emblemofseveredfate" count=5;
raiden add stats hp=4780 atk=311 atk%=0.466 electro%=0.466 cr=0.311; #main
raiden add stats def%=0.124 def=39.36 hp=507.88 hp%=0.0992 atk=33.08 atk%=0.0992 er=0.3306 em=39.64 cr=0.3972 cd=0.5296;
								
fischl char lvl=90/90 cons=6 talent=9,9,9;
fischl add weapon="alleyhunter" refine=1 +params=[stacks=10] lvl=90/90;
fischl add set="gt" count=4;
fischl add stats hp=4780 atk=311 atk%=0.466 electro%=0.466 cr=0.311; #main
fischl add stats def%=0.124 def=39.36 hp=507.88 hp%=0.0992 atk=33.08 atk%=0.1984 er=0.1102 em=39.64 cr=0.331 cd=0.7944;

xingqiu char lvl=90/90 cons=6 talent=9,9,9;
xingqiu add weapon="wolffang" refine=1 lvl=90/90;
xingqiu add set="emblem" count=4;
xingqiu add stats hp=4780 atk=311 atk%=0.466 cd=0.622 hydro%=0.466 ;
xingqiu add stats def%=0.124 def=39.36 hp=507.88 hp%=0.0992 atk=33.08 atk%=0.1984 er=0.1102 em=39.64 cr=0.3972 cd=0.662;

jean char lvl=90/90 cons=0 talent=9,9,9;
jean add weapon="favoniussword" refine=3 lvl=90/90;
jean add set="viridescentvenerer" count=4;
jean add stats hp=4780 atk=311 atk%=0.466 anemo%=0.466 cr=0.311 ; #main
jean add stats def%=0.124 def=39.36 hp=507.88 hp%=0.0992 atk=33.08 atk%=0.0992 er=0.1102 em=237.84 cr=0.331 cd=0.2648;


options iteration=100;
target lvl=100 resist=.1 radius=2 pos=0,2.5 hp=000000069999999999;
energy every interval=480,720 amount=1;
active raiden ;

# Raiden Combo
fn raiden_combo() {
  raiden burst, attack:4, skill;
  while .raiden.mods.raidenburst {
    if .raiden.normal > 4 { 
      raiden dash;
    } else {
      raiden attack;
    }
  }
}

raiden skill;
for let i=0; i<5; i=i+1 {
  {
  xingqiu skill, dash, burst, attack;
  jean skill, attack, burst;
  fischl attack,  burst;
  raiden attack;
  raiden_combo();
  jean skill, attack;
  }
  if is_even(i) {
    fischl skill, attack:3;
  }
  while !.jean.mods.favonius-cd {
    jean attack;
  }
  if !is_even(i) {
  xingqiu attack:3;
   }
}



